apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: vulnerability-scan-2
  namespace: chanu
spec:
  params:
    - name: QUAYURL
      type: string
    - name: QUAYREPONAME
      type: string
    - name: QUAYAPITOKEN
      type: string
    - name: tag
      type: string
  steps:
    - image: >-
        image-registry.openshift-image-registry.svc:5000/chanu/ubuntu-custom:latest
      name: set-env-variables
      resources: {}
      script: >

        echo "Waiting to finish vulnerabilities scan..."

        sleep 300

        curl -k -H "Authorization: Bearer
        UNmM3xiIWZ/+Cdxwq6DDLmC+rx6JowtGAAQUjbOpFrwAuH4iT50OJ4AerVIdLxUM"
        $(params.QUAYURL)/api/v1/repository/$(params.QUAYREPONAME) | jq -r
        '.tags[] | select(.name == '\"$(params.tag)\"').manifest_digest' >
        /tekton/home/image.txt
         
        MANIFEST=$(cat /tekton/home/image.txt)


        echo "Scanning each layer for Critical Vulnerabilities..."

        curl -k -H "Authorization: Bearer
        UNmM3xiIWZ/+Cdxwq6DDLmC+rx6JowtGAAQUjbOpFrwAuH4iT50OJ4AerVIdLxUM"
        $(params.QUAYURL)/api/v1/repository/$(params.QUAYREPONAME)/manifest/${MANIFEST}/security?vulnerabilities=true
        | jq -r '.data.Layer.Features[].Vulnerabilities[] | .Name + " " +
        .NamespaceName + " " + .Severity' >
        /tekton/home/critical_vulnerabilities.txt

        CRITICAL=$(cat /tekton/home/critical_vulnerabilities.txt | grep Critical
        | wc -l)

        if [ $CRITICAL -ne 0 ]; then
          echo "There are $CRITICAL Critical Vulnerabilities found in this Layer, Exiting from Pipeline..."
          exit 1
        else
          echo "No Critical Vulnerabilities found in this Layer"
        fi

        # Repeat the above steps for High, Medium, Low, and Unknown
        vulnerabilities

        # Modify the API URL and severity level accordingly for each step
