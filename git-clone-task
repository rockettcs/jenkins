apiVersion: tekton.dev/v1beta1
kind: ClusterTask
metadata:
  annotations:
    kubectl.kubernetes.io/last-applied-configuration: >
      {"apiVersion":"tekton.dev/v1beta1","kind":"ClusterTask","metadata":{"annotations":{"tekton.dev/categories":"Git","tekton.dev/displayName":"git
      clone","tekton.dev/pipelines.minVersion":"0.21.0","tekton.dev/platforms":"linux/amd64,linux/s390x,linux/ppc64le,linux/arm64","tekton.dev/tags":"git"},"labels":{"app.kubernetes.io/version":"0.4","operator.tekton.dev/provider-type":"redhat"},"name":"git-clone","namespace":"openshift-pipelines","ownerReferences":[{"apiVersion":"operator.tekton.dev/v1alpha1","blockOwnerDeletion":true,"controller":true,"kind":"TektonInstallerSet","name":"addon-clustertasks-fwm6n","uid":"22cd8a5c-4ac3-4b6a-9af4-dc238bc8d634"}]},"spec":{"description":"These
      Tasks are Git tasks to work with repositories used by other tasks in your
      Pipeline.\nThe git-clone Task will clone a repo from the provided url into
      the output Workspace. By default the repo will be cloned into the root of
      your Workspace. You can clone into a subdirectory by setting this Task's
      subdirectory param. This Task also supports sparse checkouts. To perform a
      sparse checkout, pass a list of comma separated directory patterns to this
      Task's sparseCheckoutDirectories
      param.","params":[{"description":"Repository URL to clone
      from.","name":"url","type":"string"},{"default":"","description":"Revision
      to checkout. (branch, tag, sha, ref,
      etc...)","name":"revision","type":"string"},{"default":"","description":"Refspec
      to fetch before checking out
      revision.","name":"refspec"},{"default":"true","description":"Initialize
      and fetch git
      submodules.","name":"submodules","type":"string"},{"default":"1","description":"Perform
      a shallow clone, fetching only the most recent N
      commits.","name":"depth","type":"string"},{"default":"true","description":"Set
      the `http.sslVerify` global git config. Setting this to `false` is not
      advised unless you are sure that you trust your git
      remote.","name":"sslVerify","type":"string"},{"default":"","description":"Subdirectory
      inside the `output` Workspace to clone the repo
      into.","name":"subdirectory","type":"string"},{"default":"","description":"Define
      the directory patterns to match or exclude when performing a sparse
      checkout.","name":"sparseCheckoutDirectories","type":"string"},{"default":"true","description":"Clean
      out the contents of the destination directory if it already exists before
      cloning.","name":"deleteExisting","type":"string"},{"default":"","description":"HTTP
      proxy server for non-SSL
      requests.","name":"httpProxy","type":"string"},{"default":"","description":"HTTPS
      proxy server for SSL
      requests.","name":"httpsProxy","type":"string"},{"default":"","description":"Opt
      out of proxying HTTP/HTTPS
      requests.","name":"noProxy","type":"string"},{"default":"true","description":"Log
      the commands that are executed during `git-clone`'s
      operation.","name":"verbose","type":"string"},{"default":"registry.redhat.io/openshift-pipelines/pipelines-git-init-rhel8@sha256:dde6d6d4b40f87ccc6737f1e317c13f6ff153155da4ebc48a2a5ebf31582f727","description":"The
      image providing the git-init binary that this Task
      runs.","name":"gitInitImage","type":"string"},{"default":"/tekton/home","description":"Absolute
      path to the user's home directory. Set this explicitly if you are running
      the image as a non-root user or have overridden\nthe gitInitImage param
      with an image containing custom user
      configuration.\n","name":"userHome","type":"string"}],"results":[{"description":"The
      precise commit SHA that was fetched by this
      Task.","name":"commit"},{"description":"The precise URL that was fetched
      by this
      Task.","name":"url"}],"steps":[{"env":[{"name":"HOME","value":"$(params.userHome)"},{"name":"PARAM_URL","value":"$(params.url)"},{"name":"PARAM_REVISION","value":"$(params.revision)"},{"name":"PARAM_REFSPEC","value":"$(params.refspec)"},{"name":"PARAM_SUBMODULES","value":"$(params.submodules)"},{"name":"PARAM_DEPTH","value":"$(params.depth)"},{"name":"PARAM_SSL_VERIFY","value":"$(params.sslVerify)"},{"name":"PARAM_SUBDIRECTORY","value":"$(params.subdirectory)"},{"name":"PARAM_DELETE_EXISTING","value":"$(params.deleteExisting)"},{"name":"PARAM_HTTP_PROXY","value":"$(params.httpProxy)"},{"name":"PARAM_HTTPS_PROXY","value":"$(params.httpsProxy)"},{"name":"PARAM_NO_PROXY","value":"$(params.noProxy)"},{"name":"PARAM_VERBOSE","value":"$(params.verbose)"},{"name":"PARAM_SPARSE_CHECKOUT_DIRECTORIES","value":"$(params.sparseCheckoutDirectories)"},{"name":"PARAM_USER_HOME","value":"$(params.userHome)"},{"name":"WORKSPACE_OUTPUT_PATH","value":"$(workspaces.output.path)"},{"name":"WORKSPACE_SSH_DIRECTORY_BOUND","value":"$(workspaces.ssh-directory.bound)"},{"name":"WORKSPACE_SSH_DIRECTORY_PATH","value":"$(workspaces.ssh-directory.path)"},{"name":"WORKSPACE_BASIC_AUTH_DIRECTORY_BOUND","value":"$(workspaces.basic-auth.bound)"},{"name":"WORKSPACE_BASIC_AUTH_DIRECTORY_PATH","value":"$(workspaces.basic-auth.path)"}],"image":"$(params.gitInitImage)","name":"clone","script":"#!/usr/bin/env
      sh\nset -eu\n\nif [ \"${PARAM_VERBOSE}\" = \"true\" ] ; then\n  set
      -x\nfi\n\nif [ \"${WORKSPACE_BASIC_AUTH_DIRECTORY_BOUND}\" = \"true\" ] ;
      then\n  cp \"${WORKSPACE_BASIC_AUTH_DIRECTORY_PATH}/.git-credentials\"
      \"${PARAM_USER_HOME}/.git-credentials\"\n  cp
      \"${WORKSPACE_BASIC_AUTH_DIRECTORY_PATH}/.gitconfig\"
      \"${PARAM_USER_HOME}/.gitconfig\"\n  chmod 400
      \"${PARAM_USER_HOME}/.git-credentials\"\n  chmod 400
      \"${PARAM_USER_HOME}/.gitconfig\"\nfi\n\nif [
      \"${WORKSPACE_SSH_DIRECTORY_BOUND}\" = \"true\" ] ; then\n  cp -R
      \"${WORKSPACE_SSH_DIRECTORY_PATH}\" \"${PARAM_USER_HOME}\"/.ssh\n  chmod
      700 \"${PARAM_USER_HOME}\"/.ssh\n  chmod -R 400
      \"${PARAM_USER_HOME}\"/.ssh/*\nfi\n\nCHECKOUT_DIR=\"${WORKSPACE_OUTPUT_PATH}/${PARAM_SUBDIRECTORY}\"\n\ncleandir()
      {\n  # Delete any existing contents of the repo directory if it exists.\n 
      #\n  # We don't just \"rm -rf ${CHECKOUT_DIR}\" because ${CHECKOUT_DIR}
      might be \"/\"\n  # or the root of a mounted volume.\n  if [ -d
      \"${CHECKOUT_DIR}\" ] ; then\n    # Delete non-hidden files and
      directories\n    rm -rf \"${CHECKOUT_DIR:?}\"/*\n    # Delete files and
      directories starting with . but excluding ..\n    rm -rf
      \"${CHECKOUT_DIR}\"/.[!.]*\n    # Delete files and directories starting
      with .. plus any other character\n    rm -rf \"${CHECKOUT_DIR}\"/..?*\n 
      fi\n}\n\nif [ \"${PARAM_DELETE_EXISTING}\" = \"true\" ] ; then\n 
      cleandir\nfi\n\ntest -z \"${PARAM_HTTP_PROXY}\" || export
      HTTP_PROXY=\"${PARAM_HTTP_PROXY}\"\ntest -z \"${PARAM_HTTPS_PROXY}\" ||
      export HTTPS_PROXY=\"${PARAM_HTTPS_PROXY}\"\ntest -z \"${PARAM_NO_PROXY}\"
      || export NO_PROXY=\"${PARAM_NO_PROXY}\"\n\n/ko-app/git-init \\\n 
      -url=\"${PARAM_URL}\" \\\n  -revision=\"${PARAM_REVISION}\" \\\n 
      -refspec=\"${PARAM_REFSPEC}\" \\\n  -path=\"${CHECKOUT_DIR}\" \\\n 
      -sslVerify=\"${PARAM_SSL_VERIFY}\" \\\n 
      -submodules=\"${PARAM_SUBMODULES}\" \\\n  -depth=\"${PARAM_DEPTH}\" \\\n 
      -sparseCheckoutDirectories=\"${PARAM_SPARSE_CHECKOUT_DIRECTORIES}\"\ncd
      \"${CHECKOUT_DIR}\"\nRESULT_SHA=\"$(git rev-parse
      HEAD)\"\nEXIT_CODE=\"$?\"\nif [ \"${EXIT_CODE}\" != 0 ] ; then\n  exit
      \"${EXIT_CODE}\"\nfi\nprintf \"%s\" \"${RESULT_SHA}\" \u003e
      \"$(results.commit.path)\"\nprintf \"%s\" \"${PARAM_URL}\" \u003e
      \"$(results.url.path)\"\n"}],"workspaces":[{"description":"The git repo
      will be cloned onto the volume backing this
      Workspace.","name":"output"},{"description":"A .ssh directory with private
      key, known_hosts, config, etc. Copied to\nthe user's home before git
      commands are executed. Used to authenticate\nwith the git remote when
      performing the clone. Binding a Secret to this\nWorkspace is strongly
      recommended over other volume
      types.\n","name":"ssh-directory","optional":true},{"description":"A
      Workspace containing a .gitconfig and .git-credentials file. These\nwill
      be copied to the user's home before any git commands are run. Any\nother
      files in this Workspace are ignored. It is strongly recommended\nto use
      ssh-directory over basic-auth whenever possible and to bind a\nSecret to
      this Workspace over other volume
      types.\n","name":"basic-auth","optional":true}]}}
    tekton.dev/categories: Git
    tekton.dev/displayName: git clone
    tekton.dev/pipelines.minVersion: 0.21.0
    tekton.dev/platforms: 'linux/amd64,linux/s390x,linux/ppc64le,linux/arm64'
    tekton.dev/tags: git
  resourceVersion: '1870305248'
  name: git-clone
  uid: 279c0090-c051-41c1-b79e-9995ff305ab0
  creationTimestamp: '2021-08-26T10:37:19Z'
  generation: 28
  managedFields:
    - apiVersion: tekton.dev/v1beta1
      fieldsType: FieldsV1
      fieldsV1:
        'f:spec':
          'f:workspaces': {}
      manager: Mozilla
      operation: Update
      time: '2023-01-14T15:48:22Z'
    - apiVersion: tekton.dev/v1beta1
      fieldsType: FieldsV1
      fieldsV1:
        'f:metadata':
          'f:annotations':
            .: {}
            'f:kubectl.kubernetes.io/last-applied-configuration': {}
            'f:tekton.dev/categories': {}
            'f:tekton.dev/displayName': {}
            'f:tekton.dev/pipelines.minVersion': {}
            'f:tekton.dev/platforms': {}
            'f:tekton.dev/tags': {}
          'f:labels':
            .: {}
            'f:app.kubernetes.io/version': {}
            'f:operator.tekton.dev/provider-type': {}
          'f:ownerReferences':
            .: {}
            'k:{"uid":"22cd8a5c-4ac3-4b6a-9af4-dc238bc8d634"}': {}
        'f:spec':
          .: {}
          'f:description': {}
          'f:params': {}
          'f:results': {}
          'f:steps': {}
      manager: manifestival
      operation: Update
      time: '2023-04-14T12:32:04Z'
  ownerReferences:
    - apiVersion: operator.tekton.dev/v1alpha1
      blockOwnerDeletion: true
      controller: true
      kind: TektonInstallerSet
      name: addon-clustertasks-fwm6n
      uid: 22cd8a5c-4ac3-4b6a-9af4-dc238bc8d634
  labels:
    app.kubernetes.io/version: '0.4'
    operator.tekton.dev/provider-type: redhat
spec:
  description: >-
    These Tasks are Git tasks to work with repositories used by other tasks in
    your Pipeline.

    The git-clone Task will clone a repo from the provided url into the output
    Workspace. By default the repo will be cloned into the root of your
    Workspace. You can clone into a subdirectory by setting this Task's
    subdirectory param. This Task also supports sparse checkouts. To perform a
    sparse checkout, pass a list of comma separated directory patterns to this
    Task's sparseCheckoutDirectories param.
  params:
    - description: Repository URL to clone from.
      name: url
      type: string
    - default: ''
      description: 'Revision to checkout. (branch, tag, sha, ref, etc...)'
      name: revision
      type: string
    - default: ''
      description: Refspec to fetch before checking out revision.
      name: refspec
      type: string
    - default: 'true'
      description: Initialize and fetch git submodules.
      name: submodules
      type: string
    - default: '1'
      description: 'Perform a shallow clone, fetching only the most recent N commits.'
      name: depth
      type: string
    - default: 'true'
      description: >-
        Set the `http.sslVerify` global git config. Setting this to `false` is
        not advised unless you are sure that you trust your git remote.
      name: sslVerify
      type: string
    - default: ''
      description: Subdirectory inside the `output` Workspace to clone the repo into.
      name: subdirectory
      type: string
    - default: ''
      description: >-
        Define the directory patterns to match or exclude when performing a
        sparse checkout.
      name: sparseCheckoutDirectories
      type: string
    - default: 'true'
      description: >-
        Clean out the contents of the destination directory if it already exists
        before cloning.
      name: deleteExisting
      type: string
    - default: ''
      description: HTTP proxy server for non-SSL requests.
      name: httpProxy
      type: string
    - default: ''
      description: HTTPS proxy server for SSL requests.
      name: httpsProxy
      type: string
    - default: ''
      description: Opt out of proxying HTTP/HTTPS requests.
      name: noProxy
      type: string
    - default: 'true'
      description: Log the commands that are executed during `git-clone`'s operation.
      name: verbose
      type: string
    - default: >-
        registry.redhat.io/openshift-pipelines/pipelines-git-init-rhel8@sha256:dde6d6d4b40f87ccc6737f1e317c13f6ff153155da4ebc48a2a5ebf31582f727
      description: The image providing the git-init binary that this Task runs.
      name: gitInitImage
      type: string
    - default: /tekton/home
      description: >
        Absolute path to the user's home directory. Set this explicitly if you
        are running the image as a non-root user or have overridden

        the gitInitImage param with an image containing custom user
        configuration.
      name: userHome
      type: string
  results:
    - description: The precise commit SHA that was fetched by this Task.
      name: commit
    - description: The precise URL that was fetched by this Task.
      name: url
  steps:
    - env:
        - name: HOME
          value: $(params.userHome)
        - name: PARAM_URL
          value: $(params.url)
        - name: PARAM_REVISION
          value: $(params.revision)
        - name: PARAM_REFSPEC
          value: $(params.refspec)
        - name: PARAM_SUBMODULES
          value: $(params.submodules)
        - name: PARAM_DEPTH
          value: $(params.depth)
        - name: PARAM_SSL_VERIFY
          value: $(params.sslVerify)
        - name: PARAM_SUBDIRECTORY
          value: $(params.subdirectory)
        - name: PARAM_DELETE_EXISTING
          value: $(params.deleteExisting)
        - name: PARAM_HTTP_PROXY
          value: $(params.httpProxy)
        - name: PARAM_HTTPS_PROXY
          value: $(params.httpsProxy)
        - name: PARAM_NO_PROXY
          value: $(params.noProxy)
        - name: PARAM_VERBOSE
          value: $(params.verbose)
        - name: PARAM_SPARSE_CHECKOUT_DIRECTORIES
          value: $(params.sparseCheckoutDirectories)
        - name: PARAM_USER_HOME
          value: $(params.userHome)
        - name: WORKSPACE_OUTPUT_PATH
          value: $(workspaces.output.path)
        - name: WORKSPACE_SSH_DIRECTORY_BOUND
          value: $(workspaces.ssh-directory.bound)
        - name: WORKSPACE_SSH_DIRECTORY_PATH
          value: $(workspaces.ssh-directory.path)
        - name: WORKSPACE_BASIC_AUTH_DIRECTORY_BOUND
          value: $(workspaces.basic-auth.bound)
        - name: WORKSPACE_BASIC_AUTH_DIRECTORY_PATH
          value: $(workspaces.basic-auth.path)
      image: $(params.gitInitImage)
      name: clone
      resources: {}
      script: >
        #!/usr/bin/env sh

        set -eu


        if [ "${PARAM_VERBOSE}" = "true" ] ; then
          set -x
        fi


        if [ "${WORKSPACE_BASIC_AUTH_DIRECTORY_BOUND}" = "true" ] ; then
          cp "${WORKSPACE_BASIC_AUTH_DIRECTORY_PATH}/.git-credentials" "${PARAM_USER_HOME}/.git-credentials"
          cp "${WORKSPACE_BASIC_AUTH_DIRECTORY_PATH}/.gitconfig" "${PARAM_USER_HOME}/.gitconfig"
          chmod 400 "${PARAM_USER_HOME}/.git-credentials"
          chmod 400 "${PARAM_USER_HOME}/.gitconfig"
        fi


        if [ "${WORKSPACE_SSH_DIRECTORY_BOUND}" = "true" ] ; then
          cp -R "${WORKSPACE_SSH_DIRECTORY_PATH}" "${PARAM_USER_HOME}"/.ssh
          chmod 700 "${PARAM_USER_HOME}"/.ssh
          chmod -R 400 "${PARAM_USER_HOME}"/.ssh/*
        fi


        CHECKOUT_DIR="${WORKSPACE_OUTPUT_PATH}/${PARAM_SUBDIRECTORY}"


        cleandir() {
          # Delete any existing contents of the repo directory if it exists.
          #
          # We don't just "rm -rf ${CHECKOUT_DIR}" because ${CHECKOUT_DIR} might be "/"
          # or the root of a mounted volume.
          if [ -d "${CHECKOUT_DIR}" ] ; then
            # Delete non-hidden files and directories
            rm -rf "${CHECKOUT_DIR:?}"/*
            # Delete files and directories starting with . but excluding ..
            rm -rf "${CHECKOUT_DIR}"/.[!.]*
            # Delete files and directories starting with .. plus any other character
            rm -rf "${CHECKOUT_DIR}"/..?*
          fi
        }


        if [ "${PARAM_DELETE_EXISTING}" = "true" ] ; then
          cleandir
        fi


        test -z "${PARAM_HTTP_PROXY}" || export HTTP_PROXY="${PARAM_HTTP_PROXY}"

        test -z "${PARAM_HTTPS_PROXY}" || export
        HTTPS_PROXY="${PARAM_HTTPS_PROXY}"

        test -z "${PARAM_NO_PROXY}" || export NO_PROXY="${PARAM_NO_PROXY}"


        /ko-app/git-init \
          -url="${PARAM_URL}" \
          -revision="${PARAM_REVISION}" \
          -refspec="${PARAM_REFSPEC}" \
          -path="${CHECKOUT_DIR}" \
          -sslVerify="${PARAM_SSL_VERIFY}" \
          -submodules="${PARAM_SUBMODULES}" \
          -depth="${PARAM_DEPTH}" \
          -sparseCheckoutDirectories="${PARAM_SPARSE_CHECKOUT_DIRECTORIES}"
        cd "${CHECKOUT_DIR}"

        RESULT_SHA="$(git rev-parse HEAD)"

        EXIT_CODE="$?"

        if [ "${EXIT_CODE}" != 0 ] ; then
          exit "${EXIT_CODE}"
        fi

        printf "%s" "${RESULT_SHA}" > "$(results.commit.path)"

        printf "%s" "${PARAM_URL}" > "$(results.url.path)"
  workspaces:
    - description: The git repo will be cloned onto the volume backing this Workspace.
      name: output
    - description: |
        A .ssh directory with private key, known_hosts, config, etc. Copied to
        the user's home before git commands are executed. Used to authenticate
        with the git remote when performing the clone. Binding a Secret to this
        Workspace is strongly recommended over other volume types.
      name: ssh-directory
      optional: true
    - description: |
        A Workspace containing a .gitconfig and .git-credentials file. These
        will be copied to the user's home before any git commands are run. Any
        other files in this Workspace are ignored. It is strongly recommended
        to use ssh-directory over basic-auth whenever possible and to bind a
        Secret to this Workspace over other volume types.
      name: basic-auth
      optional: true
